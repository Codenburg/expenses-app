create type "public"."gender" as enum ('male', 'female');

create type "public"."payment_methods" as enum ('efectivo', 'credito', 'debito', 'transferencia');

create type "public"."payment_state" as enum ('pagado', 'atrasado', 'pendiente');

create table "public"."balances" (
    "balances_id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "amount_available" bigint not null,
    "user_id" uuid
);


alter table "public"."balances" enable row level security;

create table "public"."categories" (
    "category_id" bigint generated by default as identity not null,
    "category_name" text,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid
);


alter table "public"."categories" enable row level security;

create table "public"."expenses" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "payment_method" payment_methods not null default 'efectivo'::payment_methods,
    "category_id" bigint not null,
    "payment_state" payment_state not null default 'pagado'::payment_state,
    "expense_amount" bigint not null,
    "expense_description" text default ''::text,
    "user_id" uuid
);


alter table "public"."expenses" enable row level security;

CREATE UNIQUE INDEX balances_pkey ON public.balances USING btree (balances_id);

CREATE UNIQUE INDEX categories_category_name_key ON public.categories USING btree (category_name);

CREATE UNIQUE INDEX categories_id_key ON public.categories USING btree (category_id);

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (category_id);

CREATE UNIQUE INDEX categories_user_id_key ON public.categories USING btree (user_id);

CREATE UNIQUE INDEX expenses_id_key ON public.expenses USING btree (id);

CREATE UNIQUE INDEX expenses_pkey ON public.expenses USING btree (id);

CREATE UNIQUE INDEX expenses_user_id_key ON public.expenses USING btree (user_id);

alter table "public"."balances" add constraint "balances_pkey" PRIMARY KEY using index "balances_pkey";

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."expenses" add constraint "expenses_pkey" PRIMARY KEY using index "expenses_pkey";

alter table "public"."balances" add constraint "public_balances_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."balances" validate constraint "public_balances_user_id_fkey";

alter table "public"."categories" add constraint "categories_category_name_key" UNIQUE using index "categories_category_name_key";

alter table "public"."categories" add constraint "categories_id_key" UNIQUE using index "categories_id_key";

alter table "public"."categories" add constraint "categories_user_id_key" UNIQUE using index "categories_user_id_key";

alter table "public"."categories" add constraint "public_categories_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."categories" validate constraint "public_categories_user_id_fkey";

alter table "public"."expenses" add constraint "expenses_id_key" UNIQUE using index "expenses_id_key";

alter table "public"."expenses" add constraint "expenses_user_id_key" UNIQUE using index "expenses_user_id_key";

alter table "public"."expenses" add constraint "public_expenses_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(category_id) not valid;

alter table "public"."expenses" validate constraint "public_expenses_category_id_fkey";

alter table "public"."expenses" add constraint "public_expenses_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."expenses" validate constraint "public_expenses_user_id_fkey";

grant delete on table "public"."balances" to "anon";

grant insert on table "public"."balances" to "anon";

grant references on table "public"."balances" to "anon";

grant select on table "public"."balances" to "anon";

grant trigger on table "public"."balances" to "anon";

grant truncate on table "public"."balances" to "anon";

grant update on table "public"."balances" to "anon";

grant delete on table "public"."balances" to "authenticated";

grant insert on table "public"."balances" to "authenticated";

grant references on table "public"."balances" to "authenticated";

grant select on table "public"."balances" to "authenticated";

grant trigger on table "public"."balances" to "authenticated";

grant truncate on table "public"."balances" to "authenticated";

grant update on table "public"."balances" to "authenticated";

grant delete on table "public"."balances" to "service_role";

grant insert on table "public"."balances" to "service_role";

grant references on table "public"."balances" to "service_role";

grant select on table "public"."balances" to "service_role";

grant trigger on table "public"."balances" to "service_role";

grant truncate on table "public"."balances" to "service_role";

grant update on table "public"."balances" to "service_role";

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."expenses" to "anon";

grant insert on table "public"."expenses" to "anon";

grant references on table "public"."expenses" to "anon";

grant select on table "public"."expenses" to "anon";

grant trigger on table "public"."expenses" to "anon";

grant truncate on table "public"."expenses" to "anon";

grant update on table "public"."expenses" to "anon";

grant delete on table "public"."expenses" to "authenticated";

grant insert on table "public"."expenses" to "authenticated";

grant references on table "public"."expenses" to "authenticated";

grant select on table "public"."expenses" to "authenticated";

grant trigger on table "public"."expenses" to "authenticated";

grant truncate on table "public"."expenses" to "authenticated";

grant update on table "public"."expenses" to "authenticated";

grant delete on table "public"."expenses" to "service_role";

grant insert on table "public"."expenses" to "service_role";

grant references on table "public"."expenses" to "service_role";

grant select on table "public"."expenses" to "service_role";

grant trigger on table "public"."expenses" to "service_role";

grant truncate on table "public"."expenses" to "service_role";

grant update on table "public"."expenses" to "service_role";

create policy "Enable read access for all users"
on "public"."expenses"
as permissive
for select
to public
using (true);


create policy "Enable write for all users"
on "public"."expenses"
as permissive
for insert
to anon
with check (true);



